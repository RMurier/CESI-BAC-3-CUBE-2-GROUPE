import prisma from "../src/utils/database";

async function main() {
  // Cr√©ation des cat√©gories avec upsert
  const categories = await Promise.all([
    prisma.category.upsert({
      where: { name: "Divers" },
      update: {},
      create: {
        name: "Divers",
        description: "Contient des ressources diverses.",
      },
    }),
    prisma.category.upsert({
      where: { name: "family" },
      update: {},
      create: {
        name: "family",
        description: "Ressources li√©es √† la famille.",
      },
    }),
    prisma.category.upsert({
      where: { name: "couple" },
      update: {},
      create: {
        name: "couple",
        description: "Ressources li√©es au couple.",
      },
    }),
    prisma.category.upsert({
      where: { name: "friends" },
      update: {},
      create: {
        name: "friends",
        description: "Ressources li√©es aux amis.",
      },
    }),
    prisma.category.upsert({
      where: { name: "work" },
      update: {},
      create: {
        name: "work",
        description: "Ressources li√©es au travail.",
      },
    }),
  ]);

  // Cr√©ation des r√¥les avec upsert
  const roles = await Promise.all([
    prisma.role.upsert({
      where: { name: "Citoyen" },
      update: {},
      create: { name: "Citoyen" },
    }),
    prisma.role.upsert({
      where: { name: "Mod√©rateur" },
      update: {},
      create: { name: "Mod√©rateur" },
    }),
    prisma.role.upsert({
      where: { name: "Admin" },
      update: {},
      create: { name: "Admin" },
    }),
    prisma.role.upsert({
      where: { name: "Super-Admin" },
      update: {},
      create: { name: "Super-Admin" },
    }),
  ]);

  // Cr√©ation des types de ressources avec upsert
  const ressourceTypes = await Promise.all([
    prisma.ressourceType.upsert({
      where: { name: "Public" },
      update: {},
      create: { name: "Public" },
    }),
    prisma.ressourceType.upsert({
      where: { name: "Priv√©" },
      update: {},
      create: { name: "Priv√©" },
    }),
  ]);

  // Cr√©ation d'un utilisateur syst√®me pour les ressources par d√©faut
  const systemUser = await prisma.user.upsert({
    where: { clerkUserId: "system-default" },
    update: {},
    create: {
      clerkUserId: "system-default",
      email: "system@example.com",
      name: "Syst√®me",
      roleId: roles.find(r => r.name === "Admin")?.id || 1,
    },
  });

  // Cr√©ation d'une ressource par d√©faut pour chaque cat√©gorie
  const defaultResources = [
    {
      title: "Ressource g√©n√©rale",
      description: "Cette ressource contient des informations g√©n√©rales utiles pour tous.",
      categoryName: "Divers",
    },
    {
      title: "Guide familial",
      description: "Un guide complet pour am√©liorer les relations familiales et cr√©er des liens durables.",
      categoryName: "family",
    },
    {
      title: "Conseils pour couples",
      description: "Des conseils pratiques pour maintenir une relation de couple √©panouie et harmonieuse.",
      categoryName: "couple",
    },
    {
      title: "Cultiver l'amiti√©",
      description: "Comment cr√©er et maintenir des amiti√©s solides et durables dans votre vie.",
      categoryName: "friends",
    },
    {
      title: "R√©ussir au travail",
      description: "Strat√©gies et conseils pour exceller dans votre carri√®re professionnelle.",
      categoryName: "work",
    },
  ];

  const publicType = ressourceTypes.find(rt => rt.name === "Public")!;

  for (const resource of defaultResources) {
    const category = categories.find(c => c.name === resource.categoryName)!;
    
    await prisma.ressource.upsert({
      where: { 
        // Utilisation d'un identifiant unique bas√© sur le titre et la cat√©gorie
        id: `default-${resource.categoryName.toLowerCase()}`,
      },
      update: {},
      create: {
        id: `default-${resource.categoryName.toLowerCase()}`,
        title: resource.title,
        description: resource.description,
        categoryId: category.id,
        ressourceTypeId: publicType.id,
        userId: systemUser.id,
      },
    });
  }

  console.log("‚úÖ Seed termin√© avec succ√®s!");
  console.log(`üìÇ ${categories.length} cat√©gories cr√©√©es/v√©rifi√©es`);
  console.log(`üë• ${roles.length} r√¥les cr√©√©s/v√©rifi√©s`);
  console.log(`üìã ${ressourceTypes.length} types de ressources cr√©√©s/v√©rifi√©s`);
  console.log(`üìÑ ${defaultResources.length} ressources par d√©faut cr√©√©es/v√©rifi√©es`);
}

main()
  .then(async () => {
    await prisma.$disconnect();
  })
  .catch(async (e) => {
    console.error("‚ùå Erreur lors du seed:", e);
    await prisma.$disconnect();
    process.exit(1);
  });